'''The parameter weekday is True if it is a weekday, and the parameter vacation is True if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return True if we sleep in.


sleep_in(False, False) → True
sleep_in(True, False) → False
sleep_in(False, True) → True'''

def sleep_in(weekday, vacation):
  if weekday == False or vacation == True:
    return True
  else:
    return False
    
    
    
    
 '''We have two monkeys, a and b, and the parameters a_smile and b_smile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return True if we are in trouble.


monkey_trouble(True, True) → True
monkey_trouble(False, False) → True
monkey_trouble(True, False) → False'''


def monkey_trouble(a_smile, b_smile):
  if a_smile == True and b_smile == True:
    return True
  elif a_smile == False and b_smile == False:
    return True
  else:
    return False
    
  
  
  
  '''Given two int values, return their sum. Unless the two values are the same, then return double their sum.


sum_double(1, 2) → 3
sum_double(3, 2) → 5
sum_double(2, 2) → 8'''



def sum_double(a, b):
  if a == b:
    return 2*(a+b)
  else:
    return a+b
    
    
 '''Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.


diff21(19) → 2
diff21(10) → 11
diff21(21) → 0'''


def diff21(n):
    if n > 21:
        return int(2 * (math.fabs((n - 21))))
    else:
        return int(math.fabs((n - 21)))



'''We have a loud talking parrot. The "hour" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return True if we are in trouble.


parrot_trouble(True, 6) → True
parrot_trouble(True, 7) → False
parrot_trouble(False, 6) → False'''


def parrot_trouble(talking, hour):
    if (hour < 7 or hour > 20) and talking == True:
        return True
    else:
        return False
        
        
   
   '''Given 2 ints, a and b, return True if one if them is 10 or if their sum is 10.


makes10(9, 10) → True
makes10(9, 9) → False
makes10(1, 9) → True'''


def makes10(a, b):
    if (a == 10 or b == 10) or a + b == 10:
        return True
    else:
        return False
        
        
   '''Given an int n, return True if it is within 10 of 100 or 200. Note: abs(num) computes the absolute value of a number.


near_hundred(93) → True
near_hundred(90) → True
near_hundred(89) → False'''


def near_hundred(n):
  if abs(n-100) <= 10 or abs(n-200) <= 10:
    return True
  else:
    return False
    
    
 '''Given 2 int values, return True if one is negative and one is positive. Except if the parameter "negative" is True, then return True only if both are negative.


pos_neg(1, -1, False) → True
pos_neg(-1, 1, False) → True
pos_neg(-4, -5, True) → True'''


def pos_neg(a, b, negative):
  if (((a < 0 and b > 0) or (a > 0 and b < 0))) and negative == False:
    return True
  elif (a < 0 and b < 0) and negative == True:
    return True
  else:
    return False
    
  
  
  '''Given a string, return a new string where "not " has been added to the front. However, 
if the string already begins with "not", return the string unchanged.
not_string('candy') → 'not candy'
not_string('x') → 'not x'
not_string('not bad') → 'not bad''''


def not_string(str):
    if str.startswith("not"):
        return str
    else:
        return "not" + " " + str
        
        
   '''Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..len(str)-1 inclusive).


missing_char('kitten', 1) → 'ktten'
missing_char('kitten', 0) → 'itten'
missing_char('kitten', 4) → 'kittn''''


def missing_char(str, n):
  for ltr in str:
    if str.index(ltr) == n:
      return str.replace(ltr,"")
      
      
   '''Given a string, return a new string where the first and last chars have been exchanged.


front_back('code') → 'eodc'
front_back('a') → 'a'
front_back('ab') → 'ba''''


def front_back(str):
    if len(str) <= 1:
        return str

    front = str[0]
    back = str[len(str) - 1]
    mid = str[1:len(str) - 1]

    new_front = front.replace(front, back)
    new_back = back.replace(back, front)
    new_str = new_front + mid + new_back

    return new_str
    
    
    
    
    '''Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.


front3('Java') → 'JavJavJav'
front3('Chocolate') → 'ChoChoCho'
front3('abc') → 'abcabcabc''''


def front3(str):
    if len(str) == 3:
        return str + str + str
    elif len(str) < 3:
        return str + str + str

    else:
        str1 = str[0:3]
        return str1 + str1 + str1
        
        
        
   '''Given a string and a non-negative int n, return a larger string that is n copies of the original string.


string_times('Hi', 2) → 'HiHi'
string_times('Hi', 3) → 'HiHiHi'
string_times('Hi', 1) → 'Hi''''


def string_times(str, n):
  if n == 1:
    return str
  else:
    return n*str
    
    
    
    
    '''Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or whatever is there if the string is less than length 3. Return n copies of the front;


front_times('Chocolate', 2) → 'ChoCho'
front_times('Chocolate', 3) → 'ChoChoCho'
front_times('Abc', 3) → 'AbcAbcAbc''''


def front_times(str, n):
  if len(str) < 3:
    return n*str
  else:
    return n*(str[0:3])
    
    
    
   '''Given a string, return a new string made of every other char starting with the first, so "Hello" yields "Hlo".


string_bits('Hello') → 'Hlo'
string_bits('Hi') → 'H'
string_bits('Heeololeo') → 'Hello''''


def string_bits(str):
    str_new = ""
    str_new1 = ""

    if len(str) == 1:
        return str

    elif len(str) == 2:
        return str[0]

    else:
        for i in range(len(str)):
            if i % 2 == 0:
                str_new = str_new + str[i]
        return str_new
        
        
        
    '''Given a non-empty string like "Code" return a string like "CCoCodCode".


string_splosion('Code') → 'CCoCodCode'
string_splosion('abc') → 'aababc'
string_splosion('ab') → 'aab''''


def string_splosion(str):
    new_str = ""
    if len(str) == 1:
        return str

    else:

        for i in range(len(str)):
            new_str = new_str + str[0:i + 1]

    return new_str
    
    
    
    '''Given a string, return the count of the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).


last2('hixxhi') → 1
last2('xaxxaxaxx') → 1
last2('axxxaaxx') → 2'''


def last2(str):
    if len(str) == 1 or len(str) == 0:
        return 0

    count = 0
    last = str[-2:]

    for i in range(len(str) - 2):
        sub = str[i:i + 2]
        if sub == last:
            count = count + 1

    return count
    
    
    
    '''Given an array of ints, return the number of 9's in the array.


array_count9([1, 2, 9]) → 1
array_count9([1, 9, 9]) → 2
array_count9([1, 9, 9, 3, 9]) → 3'''


def array_count9(nums):
    count = 0
    length = len(nums)

    if length == 1 and 9 in nums:
        return 1

    elif length == 0:
        return 0

    for i in nums:
        if i == 9:
            count = count + 1

    return count



'''Given an array of ints, return True if one of the first 4 elements in the array is a 9. The array length may be less than 4.


array_front9([1, 2, 9, 3, 4]) → True
array_front9([1, 2, 3, 4, 9]) → False
array_front9([1, 2, 3, 4, 5]) → False'''


def array_front9(nums):
    if len(nums) == 0:
        return False

    if len(nums) == 1 and nums[0] == 9:
        return True

    else:
        return False

    if len(nums) == 2:

        for i in nums:

            if i == 9:

                return True

            else:

                return False

    if len(nums) == 3:

        for j in nums:

            if j == 9:

                return True

            else:

                return False

    if len(nums) == 4:

        for k in nums:

            if k == 9:

                return True

            else:

                return False

    if len(nums) == 5:

        for l in nums:

            if l == 9:
                return True


'''Given an array of ints, return True if the sequence of numbers 1, 2, 3 appears in the array somewhere.


array123([1, 1, 2, 3, 1]) → True
array123([1, 1, 2, 4, 1]) → False
array123([1, 1, 2, 1, 2, 3]) → True'''


def array123(nums):
    if len(nums) == 0 or len(nums) == 1 or len(nums) == 2:

        return False


    elif len(nums) > 2:

        for i in range(len(nums) - 2):

            if nums[i] == 1 and nums[i + 1] == 2 and nums[i + 2] == 3:

                return True
            else:
                return False





'''Given 2 strings, a and b, return the number of the positions where they contain the same length 2 substring. So "xxcaazz" and "xxbaaz" yields 3, since the "xx", "aa", and "az" substrings appear in the same place in both strings.


string_match('xxcaazz', 'xxbaaz') → 3
string_match('abc', 'abc') → 2
string_match('abc', 'axc') → 0'''


def string_match(a, b):
    short = min(len(a), len(b))
    count = 0

    for i in range(short - 1):
        a_sub = a[i:i + 2]
        b_sub = b[i:i + 2]

        if a_sub == b_sub:
            count += 1

    return count
    
    
    
    
    '''Given a string, return a version without the first and last char, so "Hello" yields "ell". The string length will be at least 2.


without_end('Hello') → 'ell'
without_end('java') → 'av'
without_end('coding') → 'odin''''


def without_end(str):
    lgt = len(str)

    if lgt == 2:
        return ""

    elif lgt > 2:

        front = str[0]
        back = str[lgt - 1]
        mid = str[1:lgt - 1]

        return mid
        
        
        
        
    '''Given an array of ints, return True if 6 appears as either the first or last element in the array. The array will be length 1 or more.


first_last6([1, 2, 6]) → True
first_last6([6, 1, 2, 3]) → True
first_last6([13, 6, 1, 2, 3]) → False'''


def first_last6(nums):
    lgt = len(nums)

    if lgt == 1 and 6 in nums:
        return True

    if lgt >> 1 and nums[0] == 6:

        return True

    elif lgt >> 1 and nums[lgt - 1] == 6:

        return True

    else:

        return False
        
        
        
    ''Given an array of ints, return True if the array is length 1 or more, and the first element and the last element are equal.


same_first_last([1, 2, 3]) → False
same_first_last([1, 2, 3, 1]) → True
same_first_last([1, 2, 1]) → True'''


def same_first_last(nums):
    lgt = len(nums)

    if lgt == 0:
        return False

    if lgt == 1:
        return True

    if lgt > 1 and (nums[0] == nums[lgt - 1]):
        return True

    else:

        return False
        
        
        
        
    '''Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.


make_pi() → [3, 1, 4]'''


def make_pi():
    picon = []

    for i in str(math.pi):
        picon = picon + [i]

    picon = picon[0:4]

    picon.remove('.')

    for i in range(0, len(picon)):
        picon[i] = int(picon[i])

    return picon
    
    
    
    
    '''
Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".


hello_name('Bob') → 'Hello Bob!'
hello_name('Alice') → 'Hello Alice!'
hello_name('X') → 'Hello X!'
'''

def hello_name(name):
  return "Hello "+name+"!"




'''The web is built with HTML strings like "<i>Yay</i>" which draws Yay as italic text. In this example, the "i" tag makes <i> and </i> which surround the word "Yay". Given tag and word strings, create the HTML string with tags around the word, e.g. "<i>Yay</i>".


make_tags('i', 'Yay') → '<i>Yay</i>'
make_tags('i', 'Hello') → '<i>Hello</i>'
make_tags('cite', 'Yay') → '<cite>Yay</cite>''''


def make_tags(tag, word):
    return ("<" + tag + ">") + word + "</" + tag + ">"



'''Given an "out" string length 4, such as "<<>>", and a word, return a new string where the word is in the middle of the out string, e.g. "<<word>>".


make_out_word('<<>>', 'Yay') → '<<Yay>>'
make_out_word('<<>>', 'WooHoo') → '<<WooHoo>>'
make_out_word('[[]]', 'word') → '[[word]]''''


def make_out_word(out, word):
  front = out[0:2]
  back = out[2:]
  str = front + word + back
  return str




'''Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.


extra_end('Hello') → 'lololo'
extra_end('ab') → 'ababab'
extra_end('Hi') → 'HiHiHi'''


def extra_end(str):
    if len(str) == 2:
        return 3 * str

    elif len(str) > 2:

        back = str[len(str) - 2:]
        return back + back + back



'''Given a string, return the string made of its first two chars, so the String "Hello" yields "He". If the string is shorter than length 2, return whatever there is, so "X" yields "X", and the empty string "" yields the empty string "".


first_two('Hello') → 'He'
first_two('abcdefg') → 'ab'
first_two('ab') → 'ab''''


def first_two(str):
  if len(str) < 2:
    return str
  else:
    front = str[0:2]
    return front



'''Given a string of even length, return the first half. So the string "WooHoo" yields "Woo".


first_half('WooHoo') → 'Woo'
first_half('HelloThere') → 'Hello'
first_half('abcdef') → 'abc''''


def first_half(str):
    lgth = len(str)
    if lgth < 2:
        return str

    else:

        return str[0:lgth / 2]




'''Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).


combo_string('Hello', 'hi') → 'hiHellohi'
combo_string('hi', 'Hello') → 'hiHellohi'
combo_string('aaa', 'b') → 'baaab''''


def combo_string(a, b):
    al = len(a)
    bl = len(b)

    if al > bl:

        return b + a + b
    else:

        return a + b + a
        
        
        
        
  '''Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.


non_start('Hello', 'There') → 'ellohere'
non_start('java', 'code') → 'avaode'
non_start('shotl', 'java') → 'hotlava''''


def non_start(a, b):
    a_new = a[1:]
    b_new = b[1:]

    return a_new + b_new
    
    
    
    
    '''Given a string, return a "rotated left 2" version where the first 2 chars are moved to the end. The string length will be at least 2.


left2('Hello') → 'lloHe'
left2('java') → 'vaja'
left2('Hi') → 'Hi''''


def left2(str):
    first = str[0:2]
    rest = str[2:]

    return rest + first





 
